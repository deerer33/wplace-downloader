name: fetch-images

on:
  schedule:
    - cron: "30 */1 * * *"   # 6시간마다(UTC)
  workflow_dispatch: {}      # 수동 실행 허용

permissions:
  contents: write

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare folders
        shell: bash
        run: |
          mkdir -p images
          test -f images/catalog.json || echo '{"files":[]}' > images/catalog.json

           - name: Download images (per coordinate folders)
        shell: bash
        run: |
          URLS=(
            "https://backend.wplace.live/files/s0/tiles/1741/789.png"
            "https://backend.wplace.live/files/s0/tiles/1742/789.png"
            "https://backend.wplace.live/files/s0/tiles/1743/789.png"
            "https://backend.wplace.live/files/s0/tiles/1741/790.png"
            "https://backend.wplace.live/files/s0/tiles/1742/790.png"
            "https://backend.wplace.live/files/s0/tiles/1743/790.png"
            "https://backend.wplace.live/files/s0/tiles/1741/791.png"
            "https://backend.wplace.live/files/s0/tiles/1742/791.png"
            "https://backend.wplace.live/files/s0/tiles/1743/791.png"
          )

          DAYTIM="$(TZ=Asia/Seoul date +'%Y%m%d_%H%M%S')"
          tmpdir="$(mktemp -d)"

          for u in "${URLS[@]}"; do
            # tiles/ 이후 경로 (예: 1741/789.png)
            path="${u#*/tiles/}"          # 1741/789.png
            AREA="${path%%/*}"            # 1741
            COORD="${path#*/}"            # 789.png
            Y="${COORD%.*}"               # 789

            folder="${AREA}x${Y}"         # ← 폴더명: 1741x789
            mkdir -p "images/${folder}"

            # 파일명: 날짜시간_1741x789.png
            name="${DAYTIM}_${folder}.png"
            out="${tmpdir}/${name}"

            curl -L --fail --silent --show-error -o "$out" "$u" || true
            if [ -s "$out" ]; then
              mv "$out" "images/${folder}/${name}"
              echo "Saved images/${folder}/${name}"
            else
              echo "Download failed or empty for $u"
            fi
          done


      - name: Update catalog.json
        shell: bash
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const crypto = require('crypto');
          const dir = 'images';
          const catalogPath = path.join(dir, 'catalog.json');

          let catalog = { files: [] };
          if (fs.existsSync(catalogPath)) {
            try { catalog = JSON.parse(fs.readFileSync(catalogPath, 'utf8') || '{"files":[]}'); }
            catch { catalog = { files: [] }; }
          }

          const files = fs.readdirSync(dir).filter(f => /\.(png|jpg|jpeg|gif|webp)$/i.test(f));
          const known = new Set(catalog.files.map(x => x.name));

          for (const f of files) {
            if (!known.has(f)) {
              const p = path.join(dir, f);
              const sha = crypto.createHash('md5').update(fs.readFileSync(p)).digest('hex').slice(0,12);
              catalog.files.push({ name: f, sha, ts: new Date().toISOString() });
            }
          }

          catalog.files = catalog.files.sort((a,b)=>a.name.localeCompare(b.name)).slice(-2000);
          fs.writeFileSync(catalogPath, JSON.stringify(catalog, null, 2));
          console.log('files in catalog:', catalog.files.length);
          NODE

      - name: Commit and push if changed
        shell: bash
        run: |
          git config user.email "actions@users.noreply.github.com"
          git config user.name "github-actions"
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "chore: fetch images (no-conditional) [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi
